// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(NkuContext))]
    [Migration("20210527134559_modelSetting")]
    partial class modelSetting
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("Core.Entities.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassRoomCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassRoomName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StudyProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StudyProgramId");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Core.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FacultyName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Core.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Average")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FailedAbsenteeism")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FailedLowGrade")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FinalExam")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GradeLetter")
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MakeUpExam")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MidTerm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LessonCode");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Core.Entities.Lesson", b =>
                {
                    b.Property<string>("LessonCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("Akts")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExamClassRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FinalExamTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LessonClassRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LessonDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonName")
                        .HasColumnType("TEXT");

                    b.Property<int>("LessonStartHour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonofNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MakeUpExamTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MidTermTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("PracticeTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudyProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StudyTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TheoryTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("LessonCode");

                    b.HasIndex("ExamClassRoomId");

                    b.HasIndex("LessonClassRoomId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudyProgramId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Core.Entities.PdfFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LessonCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonCode1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LessonCode1");

                    b.ToTable("PdfFiles");
                });

            modelBuilder.Entity("Core.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Core.Entities.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SemesterName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudyProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudyProgramId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Core.Entities.StudentAffairs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StudyProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("StudyProgramId");

                    b.ToTable("StudentAffairs");
                });

            modelBuilder.Entity("Core.Entities.StudentInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdvisorTeacherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComeFromBranch")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComeFromFaculty")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComeFromUniversity")
                        .HasColumnType("TEXT");

                    b.Property<string>("EducationType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("GradeAverage")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("GraduationYear")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StudyProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudyTimeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorTeacherId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.HasIndex("StudyProgramId");

                    b.HasIndex("StudyTimeId");

                    b.ToTable("StudentInformations");
                });

            modelBuilder.Entity("Core.Entities.StudentPersonalityInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("BirthCity")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("FatherName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("MilitaryStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MotherName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TcNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentPersonalityInformations");
                });

            modelBuilder.Entity("Core.Entities.StudyLesson", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonCode")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId", "LessonCode");

                    b.HasIndex("LessonCode");

                    b.ToTable("StudyLessons");
                });

            modelBuilder.Entity("Core.Entities.StudyProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProgramName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StudyTimeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("StudyTimeId");

                    b.ToTable("StudyPrograms");
                });

            modelBuilder.Entity("Core.Entities.StudyTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StudyTimes");
                });

            modelBuilder.Entity("Core.Entities.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StudyProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StudyProgramId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Core.Entities.Classroom", b =>
                {
                    b.HasOne("Core.Entities.StudyProgram", "StudyProgram")
                        .WithMany("Classrooms")
                        .HasForeignKey("StudyProgramId");
                });

            modelBuilder.Entity("Core.Entities.Grade", b =>
                {
                    b.HasOne("Core.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonCode");

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Core.Entities.Lesson", b =>
                {
                    b.HasOne("Core.Entities.Classroom", "ExamClassRoom")
                        .WithMany()
                        .HasForeignKey("ExamClassRoomId");

                    b.HasOne("Core.Entities.Classroom", "LessonClassRoom")
                        .WithMany()
                        .HasForeignKey("LessonClassRoomId");

                    b.HasOne("Core.Entities.Semester", "Semester")
                        .WithMany("Lessons")
                        .HasForeignKey("SemesterId");

                    b.HasOne("Core.Entities.StudyProgram", "StudyProgram")
                        .WithMany("Lessons")
                        .HasForeignKey("StudyProgramId");

                    b.HasOne("Core.Entities.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("Core.Entities.PdfFile", b =>
                {
                    b.HasOne("Core.Entities.Lesson", "Lesson")
                        .WithMany("PdfFiles")
                        .HasForeignKey("LessonCode1");
                });

            modelBuilder.Entity("Core.Entities.Photo", b =>
                {
                    b.HasOne("Core.Entities.Student", "Student")
                        .WithOne("Photo")
                        .HasForeignKey("Core.Entities.Photo", "StudentId");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.HasOne("Core.Entities.Semester", null)
                        .WithMany("Students")
                        .HasForeignKey("SemesterId");

                    b.HasOne("Core.Entities.StudyProgram", null)
                        .WithMany("Students")
                        .HasForeignKey("StudyProgramId");
                });

            modelBuilder.Entity("Core.Entities.StudentAffairs", b =>
                {
                    b.HasOne("Core.Entities.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("Core.Entities.StudyProgram", "StudyProgram")
                        .WithMany()
                        .HasForeignKey("StudyProgramId");
                });

            modelBuilder.Entity("Core.Entities.StudentInformation", b =>
                {
                    b.HasOne("Core.Entities.Teacher", "AdvisorTeacher")
                        .WithMany()
                        .HasForeignKey("AdvisorTeacherId");

                    b.HasOne("Core.Entities.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("Core.Entities.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithOne("Information")
                        .HasForeignKey("Core.Entities.StudentInformation", "StudentId");

                    b.HasOne("Core.Entities.StudyProgram", "StudyProgram")
                        .WithMany()
                        .HasForeignKey("StudyProgramId");

                    b.HasOne("Core.Entities.StudyTime", "StudyTime")
                        .WithMany()
                        .HasForeignKey("StudyTimeId");
                });

            modelBuilder.Entity("Core.Entities.StudentPersonalityInformation", b =>
                {
                    b.HasOne("Core.Entities.Student", "Student")
                        .WithOne("PersonalityInformation")
                        .HasForeignKey("Core.Entities.StudentPersonalityInformation", "StudentId");
                });

            modelBuilder.Entity("Core.Entities.StudyLesson", b =>
                {
                    b.HasOne("Core.Entities.Lesson", "Lesson")
                        .WithMany("StudyLessons")
                        .HasForeignKey("LessonCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("StudyLessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.StudyProgram", b =>
                {
                    b.HasOne("Core.Entities.Faculty", "Faculty")
                        .WithMany("StudyPrograms")
                        .HasForeignKey("FacultyId");

                    b.HasOne("Core.Entities.StudyTime", "StudyTime")
                        .WithMany("StudyPrograms")
                        .HasForeignKey("StudyTimeId");
                });

            modelBuilder.Entity("Core.Entities.Teacher", b =>
                {
                    b.HasOne("Core.Entities.StudyProgram", "StudyProgram")
                        .WithMany("Teachers")
                        .HasForeignKey("StudyProgramId");
                });
#pragma warning restore 612, 618
        }
    }
}
